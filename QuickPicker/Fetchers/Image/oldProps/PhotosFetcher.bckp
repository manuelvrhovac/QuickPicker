//
//  PhotosFetcher.swift
//  QuickPicker
//
//  Created by Manuel Vrhovac on 27/04/2019.
//  Copyright Â© 2019 Manuel Vrhovac. All rights reserved.
//

import Foundation
import KVFetcher
import Photos
/*
public class PFetcher: KVFetcher_Protocol {
    public typealias Key = PHAsset
    public typealias Value = UIImage
    
    public var _queuedClosures: [() -> Void] = []
    public var timeout: TimeInterval?
    
    public var displaySize: CGSize = .init(width: 800, height: 800)
    public var deliveryMode: PHImageRequestOptionsDeliveryMode
    public var imageManager: PHImageManager!
    
    public func _executeFetchValue(for key: PFetcher.Key, completion: ((PFetcher.Value?) -> Void)?) {
        let quality: PHImageManager.RequestQuality = deliveryMode == .fastFormat ? .thumbnail: .full(displaySize)
        imageManager.requestImage(for: key, quality: quality, completion: completion)
    }
    
    public init(deliveryMode: PHImageRequestOptionsDeliveryMode, displaySize: CGSize, imageManager: PHImageManager!) {
        self.deliveryMode = deliveryMode
        self.displaySize = displaySize
        self.imageManager = imageManager
    }
    
    public class Caching: PFetcher, KVFetcher_Caching_Protocol {
        public typealias Cacher = PhotosCacher
        public var cacher: PhotosCacher
        
        public init(
            deliveryMode: PHImageRequestOptionsDeliveryMode,
            displaySize: CGSize,
            imageManager: PHImageManager!,
            cacher: Cacher
            ) {
            self.cacher = cacher
            super.init(deliveryMode: deliveryMode, displaySize: displaySize, imageManager: imageManager)
        }
        
        public class Active: Caching, KVFetcher_Caching_Active_Protocol {
            public var keys: () -> [PHAsset] = { return [] }
            public var currentIndex: () -> Int = { return 0 }
            public var options: Options = .upcoming(0)
        }
    }
}
 */

public class PhotosFetcher: KVPropsFetcher<PHAsset, UIImage, PhotosFetcher.Props> {
    
    public class Props {
        
        typealias DeliveryMode = PHImageRequestOptionsDeliveryMode
        
        public var displaySize: CGSize = .init(width: 800, height: 800)
        public var deliveryMode: PHImageRequestOptionsDeliveryMode
        public var imageManager: PHImageManager = appImageManager
        
        private init(displaySize: CGSize, deliveryMode: DeliveryMode, imageManager: PHImageManager) {
            self.displaySize = displaySize
            self.deliveryMode = deliveryMode
            self.imageManager = imageManager
        }
    }
    
    public override func _executeFetchValue(for key: PHAsset, completion: ValueCompletion!) {
        let isFast = props.deliveryMode == .fastFormat
        props.imageManager.requestImage(for: key,
                                        quality: isFast ? .thumbnail : .full(props.displaySize),
                                        completion: completion)
    }
}

extension PhotosFetcher {
    
    public class Caching: PhotosFetcher, KVFetcher_Caching_Protocol {
        
        public typealias Cacher = PhotosCacher
        public var cacher: PhotosCacher

        public init(_ props: PhotosFetcher.Props, cacher: Cacher) {
            self.cacher = cacher
            super.init(props)
        }
    }
}

extension PhotosFetcher.Caching {
    
    public class Active: Caching, KVFetcher_Caching_Active_Protocol {
        
        public var keys: () -> [Key]
        public var currentIndex: () -> Int
        public var options: KVActiveFetchingOptions
        
        public init(
            _ props: Props,
            keys: @escaping () -> [Key],
            currentIndex: @escaping () -> Int,
            options: KVActiveFetchingOptions,
            cacher: Cacher
            ) {
            self.keys = keys
            self.currentIndex = currentIndex
            self.options = options
            super.init(props, cacher: cacher)
        }
        
        
        public static var empty: Active {
            return .init(.zero, keys: { return [] }, currentIndex: { return 0 }, options: .none, cacher: .restricted)
        }
    }
}

extension PhotosFetcher.Props {
    
    private convenience init(deliverMode: PHImageRequestOptionsDeliveryMode) {
        self.init(displaySize: .init(width: 800, height: 800), deliveryMode: deliverMode, imageManager: .default())
    }
    
    public static var `defaultFastFormat`: PhotosFetcher.Props {
        return .init(deliverMode: .fastFormat)
    }
    
    public static func thumbnail(targetSize: CGSize) -> PhotosFetcher.Props {
        return .init(displaySize: targetSize, deliveryMode: .fastFormat, imageManager: .default())
    }
    
    public static func full(targetSize: CGSize) -> PhotosFetcher.Props {
        return .init(displaySize: targetSize, deliveryMode: .highQualityFormat, imageManager: .default())
    }
    
    public static var zero: PhotosFetcher.Props {
        return .init(displaySize: .zero, deliveryMode: .highQualityFormat, imageManager: .default())
    }
}
